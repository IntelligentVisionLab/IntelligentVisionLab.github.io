<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-10-09T10:36:28+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Intelligent Vision Lab</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Chengxin Lv</name></author><entry><title type="html">Capsule Networks With Capsule-Type Normalization Routing</title><link href="http://localhost:4000/misc/2024/09/23/pdf-test.html" rel="alternate" type="text/html" title="Capsule Networks With Capsule-Type Normalization Routing" /><published>2024-09-23T00:00:00+08:00</published><updated>2024-09-23T00:00:00+08:00</updated><id>http://localhost:4000/misc/2024/09/23/pdf-test</id><content type="html" xml:base="http://localhost:4000/misc/2024/09/23/pdf-test.html"><![CDATA[<!-- ## Capsule Networks With Capsule-Type Normalization Routing -->
<p>Abstract—Capsule Networks (CapsNets) have been well known
for its part-whole relational property, whilst with heavy computation of the capsule routing. The classic Expectation-Maximization
(EM) capsule routing first compute the vote matrix by multiplying part-whole pose matrix and learnable weight matrix, and
secondly fed vote matrices and activations into EM algorithm
for clustering. The heavy computation comes from a large-scale
computations of vote matrices and large-scale data EM cluster.
To address the challenge of lightweight design of CapsNets,
different from the previous EM capsule routing that obeys the
first-vote-then-cluster rule, we implement a novel first-cluterthen-vote mechanism. To this end, in this paper, we develop a
capsule-type normalization routing algorithm as illustrated in
Fig. 1 (b). Specifically, we first normalize the part-level capsules
along the type dimension with the aim of transforming all types
of capsules into a uniform distribution. Secondly, all part-level
capsules and their mixed capsules are voted to the whole-level
capsules via a multiplication with a single transformable matrix.
In such way, the cluster computation and matrix multiplication
computation both get reduced with a large margin. Our capsuletype normalization routing builds a deep CapsNets, which are
proved to be promising on multiple datasets, including MNIST,
SVHN, SmallNORB, CIFAR-10/100. Notably, our CapsNets can
be implemented on the large-scale ImageNet-1K dataset and
beats ResNets, which is quite difficult for the previous CapsNets
versions.
<img src="https://vimeo.com/263856289" alt="" />
如果你想下载本文相关的详细 PDF 文件，可以点击下面的链接进行下载：</p>

<p><a href="/assets/pdf/test.pdf"> PDF </a></p>]]></content><author><name>Chengxin Lv</name></author><category term="misc" /><category term="Capsule Networks" /><summary type="html"><![CDATA[Abstract—Capsule Networks (CapsNets) have been well known for its part-whole relational property, whilst with heavy computation of the capsule routing. The classic Expectation-Maximization (EM) capsule routing first compute the vote matrix by multiplying part-whole pose matrix and learnable weight matrix, and secondly fed vote matrices and activations into EM algorithm for clustering. The heavy computation comes from a large-scale computations of vote matrices and large-scale data EM cluster. To address the challenge of lightweight design of CapsNets, different from the previous EM capsule routing that obeys the first-vote-then-cluster rule, we implement a novel first-cluterthen-vote mechanism. To this end, in this paper, we develop a capsule-type normalization routing algorithm as illustrated in Fig. 1 (b). Specifically, we first normalize the part-level capsules along the type dimension with the aim of transforming all types of capsules into a uniform distribution. Secondly, all part-level capsules and their mixed capsules are voted to the whole-level capsules via a multiplication with a single transformable matrix. In such way, the cluster computation and matrix multiplication computation both get reduced with a large margin. Our capsuletype normalization routing builds a deep CapsNets, which are proved to be promising on multiple datasets, including MNIST, SVHN, SmallNORB, CIFAR-10/100. Notably, our CapsNets can be implemented on the large-scale ImageNet-1K dataset and beats ResNets, which is quite difficult for the previous CapsNets versions. 如果你想下载本文相关的详细 PDF 文件，可以点击下面的链接进行下载：]]></summary></entry><entry><title type="html">Welcome to 601!</title><link href="http://localhost:4000/jekyll/2024/09/02/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to 601!" /><published>2024-09-02T00:00:00+08:00</published><updated>2024-09-02T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/2024/09/02/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/2024/09/02/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<h2 id="section-1">section 1</h2>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-lcx" data-lang="lcx">"吕成鑫"
"男"
177cm
CVPR2025, AAAI2024</code></pre></figure>

<h2 id="section-2">section 2</h2>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>

<p>$ a * b = c ^ b $</p>

<p>$ 2^{\frac{n-1}{3}} $</p>

<p>$ \int_a^b f(x)\,dx. $</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// prints 'Hi, Tom' to STDOUT.</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>

<span class="n">p1</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">John</span><span class="sh">"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">age</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Jeffrey</name></author><category term="jekyll" /><category term="CapsNets" /><category term="SOD" /><category term="COD" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>